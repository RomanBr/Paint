		[ [ 1, 1, 1], [ 1, -8, 1], [ 1, 1, 1 ] ]; //Laplacian 3X3
 
		[ [ -1, -1, -1, -1, -1 ], [ -1, -1, -1, -1, -1 ], [ -1, -1, 24, -1, -1 ], [ -1, -1, -1, -1, -1 ], [ -1, -1, -1, -1, -1 ] ]; //Laplacian 5X5
		 
		[ [ 0, 0, -1, 0, 0 ], [ 0, -1, -2, -1, 0 ], [ -1, -2, 16, -2, -1 ], [ 0, -1, -2, -1, 0 ], [ 0, 0, -1, 0, 0 ] ];
		 //Laplacian Of Gaussian 
		 
		 
		[ [ 1, 2, 1 ], [ 2, 4, 2 ], [ 1, 2, 1 ] ]; 
		// 1 / 16 - Gaussian3x3
		
		[ [ 2, 04, 05, 04, 2 ], [ 4, 09, 12, 09, 4 ], [ 5, 12, 15, 12, 5 ], [ 4, 09, 12, 09, 4 ], [ 2, 04, 05, 04, 2 ] ];
		// 1 / 159 - Gaussian5x5 Type1
		
		[ [ 1, 4, 6, 4, 1 ], [ 4, 16, 24, 16, 4 ], [ 6, 24, 36, 24, 6 ], [ 4, 16, 24, 16, 4 ], [ 1,  4, 6, 4, 1 ] ];
		// 1 / 256 - Gaussian5x5 Type2
		
		
	Inverse: function() {
		data2 = data2.map(function (v, i, a) {
			if ((i + 1) % 4 == 0) return v; 
			return (255 - v);
		});
		return data2;
	},
	
 	grayScale: function () {
		let c = 0;
		data2 = data2.map(function (v, i, a) {
			if ((i + 1) % 4 == 0) return v; 
			if ((i % 4) == 0) {
				c = (a[i] + a[i+1] + a[i+2]) / 3;
				return c;
			}
			return c;
		}, data2);

		return data2;
	},

		function Neighbours5(F1)
        {
			DATA();
			var matrixSize = 3;
            var filterOffset = (matrixSize - 1) / 2;
            var i = 0;

            var byteOffset = 0;
			var Stride = w * 4;
            var L1 = 0, L2 = 0, L3 = 0, r1 = 0, g1 = 0, b1 = 0;

            for (var offsetY = filterOffset; offsetY <
                h - filterOffset; offsetY++)
            {
                for (var offsetX = filterOffset; offsetX <
                    w - filterOffset; offsetX++)
                {
                    byteOffset = offsetY *
                                 Stride +
                                 offsetX * 4;

                    r = []; g = []; b = [];

					L1 = -Infinity; L2 = -Infinity; L3 = -Infinity;
					r1 = 0; g1 = 0; b1 = 0;
				
					r =  data3[byteOffset + 0];
					g =  data3[byteOffset + 1];
					b =  data3[byteOffset + 2];

					
                    for (var filterY = -filterOffset;
                        filterY <= filterOffset; filterY++)
                    {
                        if (offsetY + filterY < 0) continue;
						for (var filterX = -filterOffset;
                            filterX <= filterOffset; filterX++)
                        {
							if (offsetX + filterX < 0) continue;
							if ((mathFun.Manhattan(offsetX, offsetX + filterX, offsetY, offsetY + filterY) == 0) && (d < 0)) continue;
							if ((mathFun.Manhattan(offsetX, offsetX + filterX, offsetY, offsetY + filterY) != Math.abs(d)) && (Math.abs(d) <= 2)) continue; 

                            i = byteOffset +
                                         (filterX * 4) +
                                         (filterY * Stride);

							var F2 = F1(r, data3[i]);
							if (F2 > L1) {
								r1 = data3[i];
								L1 = F2;
							}

							var F2 = F1(g, data3[i + 1]);
							if (F2 > L2) {
								g1 = data3[i + 1];
								L2 = F2;
							}
							
							var F2 = F1(b, data3[i + 2]);
							if (F2 > L3) {
								b1 = data3[i + 2];
								L3 = F2;
							}

                        }
                    }

                    data2[byteOffset + 0] = Byte1(r1);
                    data2[byteOffset + 1] = Byte1(g1);
                    data2[byteOffset + 2] = Byte1(b1);
                    data2[byteOffset + 3] = 255;
                }
            }
			ctx.putImageData(imageData2, 0, 0);        
		}
	